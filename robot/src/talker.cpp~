#include <iostream>
#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
// PCL specific includes
#include <sensor_msgs/PointCloud2.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>

  ros::NodeHandle n;
  ros::Publisher move_pub = n.advertise<geometry_msgs::Twist>("/cmd_vel", 1);



// [(speed > 0) => FWD] || [(speed < 0) => BWD]  
bool move(ros::Publisher publisher, float speed){
	geometry_msgs::Twist base_cmd;	
	base_cmd.linear.y = base_cmd.angular.z = 0;
	base_cmd.linear.x = speed;  
 	publisher.publish(base_cmd);
	return true;
}


// [(angle_speed > 0) => LEFT] || [(angle_speed < 0) => RIGHT]  
bool rotate(ros::Publisher publisher, float angle_speed){
	geometry_msgs::Twist base_cmd;	
	base_cmd.linear.x = base_cmd.linear.y = 0;
	base_cmd.angular.z = angle_speed; 
 	publisher.publish(base_cmd);
	return true;
}

// [(speed > 0) => FWD] || [(speed < 0) => BWD]
// [(angle_speed > 0) => LEFT] || [(angle_speed < 0) => RIGHT]    
bool moveAndRotate(ros::Publisher publisher, float speed, float angle_speed){
	geometry_msgs::Twist base_cmd;	
	base_cmd.linear.x = speed; 
	base_cmd.linear.y = 0;
	base_cmd.angular.z = angle_speed; 
 	publisher.publish(base_cmd);
	return true;
}
/*
void callback(const sensor_msgs::PointCloud2ConstPtr& cloud){

  pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_filtered (new pcl::PointCloud<pcl::PointXYZRGB>); 
  int rMax = 255; 
  int rMin = 150; 
  int gMax = 60; 
  int gMin = 0; 
  int bMax = 60; 
  int bMin = 0; 

  pcl::ConditionAnd<pcl::PointXYZRGB>::Ptr color_cond (new pcl::ConditionAnd<pcl::PointXYZRGB> ()); 


  color_cond->addComparison (pcl::PackedRGBComparison<pcl::PointXYZRGB>::Ptr (new pcl::PackedRGBComparison<pcl::PointXYZRGB> ("r", pcl::ComparisonOps::LT, rMax))); 
  color_cond->addComparison (pcl::PackedRGBComparison<pcl::PointXYZRGB>::Ptr (new pcl::PackedRGBComparison<pcl::PointXYZRGB> ("r", pcl::ComparisonOps::GT, rMin))); 
  color_cond->addComparison (pcl::PackedRGBComparison<pcl::PointXYZRGB>::Ptr (new pcl::PackedRGBComparison<pcl::PointXYZRGB> ("g", pcl::ComparisonOps::LT, gMax))); 
  color_cond->addComparison (pcl::PackedRGBComparison<pcl::PointXYZRGB>::Ptr (new pcl::PackedRGBComparison<pcl::PointXYZRGB> ("g", pcl::ComparisonOps::GT, gMin))); 
  color_cond->addComparison (pcl::PackedRGBComparison<pcl::PointXYZRGB>::Ptr (new pcl::PackedRGBComparison<pcl::PointXYZRGB> ("b", pcl::ComparisonOps::LT, bMax))); 
  color_cond->addComparison (pcl::PackedRGBComparison<pcl::PointXYZRGB>::Ptr (new pcl::PackedRGBComparison<pcl::PointXYZRGB> ("b", pcl::ComparisonOps::GT, bMin))); 

  // build the filter 
  pcl::ConditionalRemoval<pcl::PointXYZRGB> condrem (color_cond); 
  condrem.setInputCloud (cloud); 
  condrem.setKeepOrganized(true); 

  // apply filter 
  condrem.filter (*cloud_filtered); 
  
  // save cloud after filtering 
  if (pcl::io::savePCDFile("filteredCloud.pcd", *cloud_filtered, true) == 0) 
  { 
     cout << "Saved filteredCloud.pcd " << endl; 
  } 
  else PCL_ERROR("Problem saving"); 

	std::cerr << "Cloud before filtering: " << std::endl;
  for (size_t i = 0; i < cloud->points.size (); ++i)
    std::cerr << "    " << cloud->points[i].x << " "
                        << cloud->points[i].y << " "
                        << cloud->points[i].z << std::endl;
  // display pointcloud after filtering
  std::cerr << "Cloud after filtering: " << std::endl;
  for (size_t i = 0; i < cloud_filtered->points.size (); ++i)
    std::cerr << "    " << cloud_filtered->points[i].x << " "
                        << cloud_filtered->points[i].y << " "
                        << cloud_filtered->points[i].z << std::endl;

	// get range of red pixels in filtered cloud
  float xMax = 0; 
  float xMin = cloud->width; 
  float yMax = 0; 
  float yMin = cloud->height; 
  float zMax = 0; 
  float zMin = 161110;
  float xCenter;
  float yCenter;
  float zCenter;
  float xDist;
  float yDist;
  float zDist;
  float epsilon = 0.2;


  for (size_t i = 0; i < cloud_filtered->points.size (); ++i){
		if(cloud_filtered->points[i].x > xMax) xMax = cloud_filtered->points[i].x;
		if(cloud_filtered->points[i].x < xMin) xMin = cloud_filtered->points[i].x;
		if(cloud_filtered->points[i].y > yMax) yMax = cloud_filtered->points[i].y;
		if(cloud_filtered->points[i].y < yMin) yMin = cloud_filtered->points[i].y;
		if(cloud_filtered->points[i].z > zMax) zMax = cloud_filtered->points[i].z;
		if(cloud_filtered->points[i].z < zMin) zMin = cloud_filtered->points[i].z;

	}

  // find center
  	xCenter = (xMax + xMin) / 2;
	yCenter = (yMax + yMin) / 2;
	zCenter = (zMax + zMin) / 2;

	// x/y/zDist :
	// if positive Center is left to the middle of the image point
	// if negative Center is right to the middle of the image point
	xDist = (cloud->width / 2) - xCenter;
  	yDist = (cloud->height / 2) - yCenter;	
  	zDist = zCenter;

	printf("xMax: %f\n", xMax);
	printf("xMin: %f\n", xMin);
	printf("yMin: %f\n", yMax);
	printf("yMin: %f\n", yMin);
	printf("zMax: %f\n", zMax);
	printf("zMin: %f\n", zMin);
	printf("xCenter: %f\n", xCenter);
	printf("yCenter: %f\n", yCenter);
	printf("zCenter: %f\n", zCenter);
	printf("xDist: %f\n", xDist);
	printf("yDist: %f\n", yDist);
	printf("zDist: %f\n", zDist);

	if (absf(xDist) > epsilon){						// Button is far from image center, rotating towards center
		if (xDist>0)								
			rotate(move_pub, 0.25);					// Rotate left
		else 
			rotate(move_pub, -0.25);				// Rotate right
	}				
	
	if (zDist > armLength)					// Robot is far from the button moving towards button
			move(move_pub, 0.25);
		





	// int count = 0;
	// ros::Rate loop_rate(10);


	// while (ros::ok() && count < 100) {
	//   move(move_pub, 0.5);	
	// 	ros::spinOnce(); // let ROS process incoming messages
	// 	loop_rate.sleep();
	// 	printf("Counter: %d\n",count);		
	// 	count++;
	// }
	



}
*/


int main(int argc, char **argv)
{

  ros::init(argc, argv, "talker");


	//std::string topic = n.resolveName("point_cloud");
	//uint32_t queue_size = 1;
	//ros::Subscriber sub = n.subscribe<sensor_msgs::PointCloud2> (topic, queue_size, callback);

  while(n.ok()){
	move(move_pub, 0.5);
	//rotate(move_pub, 0.5);
	//moveAndRotate(move_pub, -0.25, -0.5);
  }  

	
  return 0;
}
